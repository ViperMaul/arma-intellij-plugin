/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.kaylerrenslow.a3plugin.lang.header;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.kaylerrenslow.a3plugin.lang.header.psi.HeaderTypes;
import com.kaylerrenslow.a3plugin.lang.header.psi.HeaderParserDefinition;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>header.flex</tt>
 */
class HeaderLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\17\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\23"+
    "\10\1\26\1\40\3\10\1\23\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\26\3\10\2"+
    "\46\1\26\1\47\1\50\1\0\1\51\5\10\1\52\3\0\1\53\1\54\13\10\1\55\1\44\1\56\1"+
    "\57\1\0\1\60\1\26\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\26\1\0\1\66"+
    "\3\10\1\52\1\67\1\22\2\10\1\64\1\70\1\71\1\72\2\26\3\10\1\73\10\26\1\74\1"+
    "\27\6\26\1\75\2\0\1\76\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\2\40\1\103"+
    "\1\104\1\105\2\10\1\74\1\106\1\107\1\110\1\111\1\61\1\112\1\102\1\0\1\113"+
    "\1\50\1\103\1\114\1\105\2\10\1\74\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\1\124\1\26\1\103\1\35\1\34\2\10\1\74\1\125\1\107\1\44\1\126\1\127\1\26"+
    "\1\102\1\0\1\41\1\26\1\103\1\104\1\105\2\10\1\74\1\125\1\107\1\110\1\120\1"+
    "\123\1\112\1\102\1\0\1\41\1\26\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1"+
    "\135\1\136\1\137\1\140\1\26\1\123\1\0\1\26\1\41\1\103\1\31\1\74\2\10\1\74"+
    "\1\141\1\142\1\143\1\137\1\144\1\25\1\102\1\0\2\26\1\145\1\31\1\74\2\10\1"+
    "\74\1\141\1\107\1\143\1\137\1\144\1\32\1\102\1\0\1\146\1\26\1\145\1\31\1\74"+
    "\4\10\1\147\1\143\1\150\1\61\1\26\1\102\1\0\1\26\1\37\1\145\1\10\1\23\1\37"+
    "\2\10\1\34\1\151\1\23\1\152\1\153\1\0\2\26\1\154\1\26\1\40\5\10\1\155\1\156"+
    "\1\157\1\76\1\0\1\160\4\26\1\161\1\162\1\163\1\40\1\164\1\165\1\155\1\166"+
    "\1\167\1\170\1\0\1\171\4\26\1\127\2\26\1\160\1\0\1\160\1\172\1\173\1\10\1"+
    "\40\3\10\1\27\1\43\1\0\1\143\1\174\1\0\1\43\3\0\1\47\1\175\7\26\5\10\1\52"+
    "\1\0\1\176\1\0\1\160\1\64\1\177\1\200\1\201\1\202\1\10\1\203\1\204\1\0\1\170"+
    "\4\10\1\35\1\21\5\10\1\205\51\10\1\132\1\23\1\132\5\10\1\132\4\10\1\132\1"+
    "\23\1\132\1\10\1\23\7\10\1\132\10\10\1\206\4\26\2\10\2\26\12\10\1\27\1\26"+
    "\1\40\114\10\1\104\2\10\1\40\2\10\1\46\11\10\1\131\1\127\1\26\1\10\1\31\1"+
    "\207\1\26\2\10\1\207\1\26\2\10\1\210\1\26\1\10\1\31\1\211\1\26\6\10\1\212"+
    "\3\0\1\213\1\214\1\0\1\160\3\26\1\215\1\0\1\160\13\10\1\26\5\10\1\216\10\10"+
    "\1\217\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\123\1\0\3\10\1\217\1\27\1\26\5\10"+
    "\1\113\2\0\1\54\1\160\1\0\1\160\4\26\2\10\1\157\1\2\6\10\1\174\1\76\3\0\1"+
    "\110\1\0\1\160\1\0\1\160\1\42\13\26\1\220\5\10\1\212\1\0\1\220\1\113\1\0\1"+
    "\160\1\26\1\221\1\2\1\26\1\222\3\10\1\101\1\201\1\0\1\66\4\10\1\64\1\0\1\2"+
    "\1\26\4\10\1\212\2\0\1\26\1\0\1\223\1\0\1\66\3\10\1\217\12\26\1\224\2\0\1"+
    "\225\1\226\1\26\30\10\4\0\1\76\2\26\1\75\42\10\2\217\4\10\2\217\1\10\1\227"+
    "\3\10\1\217\6\10\1\31\1\167\1\230\1\27\1\231\1\113\1\10\1\27\1\230\1\27\1"+
    "\26\1\221\3\26\1\232\1\26\1\42\1\127\1\26\1\233\1\26\1\47\1\234\1\41\1\42"+
    "\2\26\1\10\1\27\3\10\1\46\2\26\1\0\1\47\1\235\1\0\1\236\1\26\1\237\1\37\1"+
    "\151\1\240\1\30\1\241\1\10\1\242\1\243\1\244\2\26\5\10\1\127\116\26\5\10\1"+
    "\23\5\10\1\23\20\10\1\27\1\245\1\246\1\26\4\10\1\35\1\21\7\10\1\42\1\26\1"+
    "\61\2\10\1\23\1\26\10\23\4\0\5\26\1\42\72\26\1\243\3\26\1\40\1\203\1\240\1"+
    "\27\1\40\11\10\1\23\1\247\1\40\12\10\1\205\1\243\4\10\1\217\1\40\12\10\1\23"+
    "\2\26\3\10\1\46\6\26\170\10\1\217\11\26\71\10\1\27\6\26\21\10\1\27\10\26\5"+
    "\10\1\217\41\10\1\27\2\10\1\0\1\246\2\26\5\10\1\157\1\75\1\250\3\10\1\61\12"+
    "\10\1\160\3\26\1\42\1\10\1\37\14\10\1\251\1\113\1\26\1\10\1\46\11\26\1\10"+
    "\1\252\1\253\2\10\1\52\2\26\1\127\6\10\1\113\1\26\1\66\5\10\1\212\1\0\1\47"+
    "\1\26\1\0\1\160\2\0\1\66\1\50\1\0\1\66\2\10\1\64\1\170\2\10\1\157\1\0\1\2"+
    "\1\26\3\10\1\27\1\77\5\10\1\52\1\0\1\236\1\42\1\0\1\160\4\26\5\10\1\101\1"+
    "\76\1\26\1\253\1\254\1\0\1\160\2\10\1\23\1\255\6\10\1\200\1\256\1\216\2\26"+
    "\1\257\1\10\1\52\1\260\1\26\3\261\1\26\2\23\22\26\4\10\1\52\1\262\1\0\1\160"+
    "\64\10\1\113\1\26\2\10\1\23\1\263\5\10\1\113\40\26\55\10\1\217\15\10\1\25"+
    "\4\26\1\23\1\26\1\263\1\264\1\10\1\74\1\23\1\167\1\265\15\10\1\25\3\26\1\263"+
    "\54\10\1\217\2\26\10\10\1\37\6\10\5\26\1\10\1\27\2\0\2\26\1\76\1\26\1\134"+
    "\2\26\1\243\3\26\1\41\1\31\20\10\1\266\1\233\1\26\1\0\1\160\1\40\2\10\1\114"+
    "\1\40\2\10\1\46\1\267\12\10\1\23\3\37\1\270\1\271\2\26\1\272\1\10\1\141\2"+
    "\10\1\23\2\10\1\273\1\10\1\217\1\10\1\217\4\26\17\10\1\46\10\26\6\10\1\27"+
    "\20\26\1\274\20\26\3\10\1\27\6\10\1\127\5\26\3\10\1\23\2\26\3\10\1\46\6\26"+
    "\3\10\1\217\4\10\1\113\1\10\1\240\5\26\23\10\1\217\1\0\1\160\52\26\1\217\1"+
    "\74\4\10\1\35\1\275\2\10\1\217\25\26\2\10\1\217\1\26\3\10\1\25\10\26\7\10"+
    "\1\267\10\26\1\276\1\75\1\141\1\40\2\10\1\113\1\117\4\26\3\10\1\27\20\26\6"+
    "\10\1\217\1\26\2\10\1\217\1\26\2\10\1\46\21\26\11\10\1\127\66\26\1\222\6\10"+
    "\1\0\1\76\3\26\1\123\1\0\2\26\1\222\5\10\1\0\1\277\2\26\3\10\1\127\1\0\1\160"+
    "\1\222\3\10\1\157\1\0\1\143\1\0\10\26\1\222\5\10\1\52\1\0\1\300\1\26\1\0\1"+
    "\160\24\26\5\10\1\52\1\0\1\26\1\0\1\160\46\26\55\10\1\23\22\26\14\10\1\46"+
    "\63\26\5\10\1\23\72\26\7\10\1\127\130\26\10\10\1\27\1\26\1\101\4\0\1\76\1"+
    "\26\1\61\1\222\1\10\14\26\1\25\153\26\1\301\1\302\2\0\1\303\1\2\3\26\1\304"+
    "\22\26\1\305\67\26\12\10\1\31\10\10\1\31\1\306\1\307\1\10\1\310\1\141\7\10"+
    "\1\35\1\311\2\31\3\10\1\312\1\167\1\37\1\74\51\10\1\217\3\10\1\74\2\10\1\205"+
    "\3\10\1\205\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\74\3\10\1\74\2"+
    "\10\1\205\1\313\6\0\1\141\3\10\1\161\1\40\1\205\1\314\1\237\1\315\1\161\1"+
    "\227\1\161\2\205\1\122\1\10\1\34\1\10\1\113\1\316\1\34\1\10\1\113\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\217\74\26\1\121\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\3\1\5\1\4\1\47\1\5\1\4\6\3\4\0\1\5\1\0\1\17\1\2\1\1\3\0\1\40\1\41\1\7"+
    "\1\35\1\44\1\13\1\11\1\6\1\14\11\10\1\45\1\46\1\20\1\34\1\21\2\0\4\16\1\12"+
    "\1\16\11\1\1\15\2\1\1\42\1\0\1\43\1\0\1\1\1\0\1\33\1\16\1\24\1\27\1\30\1\31"+
    "\2\1\1\22\2\1\1\25\1\1\1\23\4\1\1\32\1\1\1\26\2\1\1\15\2\1\1\36\1\0\1\37\1"+
    "\0\6\3\1\50\2\3\2\0\4\1\4\0\1\1\2\0\1\3\7\0\1\1\4\0\1\1\5\0\7\1\1\0\2\1\4"+
    "\0\4\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\6\0\1\1\1\0\3\1\1\0\1\1\1"+
    "\0\4\1\1\0\13\1\1\0\3\1\1\0\5\3\2\0\6\1\1\0\7\1\1\0\1\1\15\0\1\1\1\0\15\3"+
    "\1\0\1\3\1\0\2\3\1\0\2\3\1\0\1\3\3\1\5\0\5\3\6\0\1\1\4\0\3\3\5\0\3\1\7\3\4"+
    "\0\2\1\1\3\13\1\1\0\1\1\7\3\2\1\2\3\1\0\4\3\2\1\2\3\3\1\2\0\1\1\7\0\1\3\1"+
    "\1\1\3\6\1\3\3\2\0\11\1\3\3\1\1\6\0\2\3\6\1\4\3\2\1\2\0\2\3\1\1\11\3\1\1\3"+
    "\3\1\1\5\3\2\0\1\1\3\3\4\0\1\1\1\0\6\1\4\0\13\3\1\0\4\3\6\1\3\3\1\1\2\3\1"+
    "\1\7\3\2\1\2\3\2\0\2\3\1\0\3\3\1\0\10\1\2\0\2\1\2\0\6\1\1\0\1\1\3\0\4\1\2"+
    "\0\1\3\1\1\7\3\2\0\2\3\2\0\3\3\1\1\5\0\2\1\1\0\5\1\4\0\3\1\4\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3\7\0\4\1\1\0\1\1\7"+
    "\0\4\3\3\1\1\3\2\0\1\1\1\0\2\1\1\0\3\1\2\3\1\0\3\3\2\0\1\1\11\0\1\3\1\1\1"+
    "\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\2\0\1\1\6\0\1\3\4\1\1\0\5\1\3\0\1\1\7\3\1\0\2\3\5\0\2\3\3\0\2"+
    "\3\1\0\3\1\1\0\2\1\5\0\3\1\2\0\1\1\3\3\1\0\4\3\1\1\1\0\4\1\1\0\1\1\4\0\1\3"+
    "\4\0\6\3\1\0\1\3\3\0\2\3\4\0\1\1\1\3\2\1\7\3\4\0\10\1\3\3\7\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\3\1\2"+
    "\3\1\0\2\3\1\1\2\0\5\1\1\0\1\1\1\0\6\3\2\0\2\3\2\0\4\1\5\0\1\3\1\0\1\3\1\0"+
    "\1\3\4\0\2\3\5\1\3\3\6\0\1\3\1\0\7\3\1\1\2\3\4\1\3\3\1\1\3\3\2\1\7\3\3\1\4"+
    "\3\5\1\14\3\1\1\1\3\3\1\1\0\7\1\2\0\3\3\2\1\3\3\3\0\2\1\2\3\4\0\1\1\1\0\2"+
    "\3\4\0\4\1\10\3\3\0\1\1\3\0\2\1\1\3\5\0\3\3\2\0\1\1\1\3\1\1\5\0\6\1\2\0\5"+
    "\3\3\1\3\0\10\3\5\1\2\3\3\0\3\1\3\3\1\0\5\3\4\1\1\3\4\1\3\3\2\1\2\0\1\1\1"+
    "\0\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0\6\1\2\0\2\1\2\47\5\3\5\0\1\1\5\0\6\3\1"+
    "\0\1\3\3\0\4\3\11\0\1\1\4\0\1\1\1\0\5\1\2\0\1\1\1\0\4\1\1\0\3\1\2\0\4\1\5"+
    "\0\5\1\4\0\1\1\4\0\4\1\3\3\2\1\5\0\2\3\2\0\3\1\6\3\1\0\2\1\2\0\4\1\1\0\2\1"+
    "\1\3\3\1\1\3\4\1\1\3\10\1\2\3\4\0\1\1\1\3\4\0\1\3\5\1\2\3\3\0\3\1\4\0\3\1"+
    "\2\3\2\0\6\1\1\0\3\3\1\0\2\3\5\0\5\1\5\0\1\1\1\3\3\1\1\0\2\1\1\0\7\1\2\0\1"+
    "\3\6\0\2\1\2\0\3\1\3\0\2\1\3\0\2\1\2\0\3\3\4\0\3\1\1\0\2\1\1\0\1\1\5\0\1\3"+
    "\2\0\1\1\3\0\1\1\2\0\2\1\3\3\1\0\2\3\1\0\3\3\2\0\1\3\2\0\1\3\4\1\10\0\5\3"+
    "\3\0\6\3\2\0\3\3\2\0\4\3\4\0\3\3\5\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1\1\1"+
    "\0\6\1\2\0\5\1\1\0\4\1\1\0\4\1\2\0\2\3\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\7\2\2\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\2\1\17\1\20\1\21\5\0"+
    "\1\22\2\0\2\7\2\0\1\23\1\0\1\24\1\3"+
    "\1\25\1\26\7\0\1\7\2\27\1\3\7\0\1\30"+
    "\1\27\1\3\6\0\1\31\1\27\1\32\2\0\1\33"+
    "\1\34\1\0\1\35\1\27\1\0\1\36\1\37\1\27"+
    "\1\40\3\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\51\0\366"+
    "\0\u011f\0\51\0\u0148\0\u0171\0\u019a\0\u01c3\0\51\0\u01ec"+
    "\0\51\0\51\0\51\0\51\0\u0215\0\51\0\51\0\51"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u011f"+
    "\0\u035d\0\u0386\0\u03af\0\u0171\0\u03d8\0\u019a\0\u019a\0\u0401"+
    "\0\51\0\51\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u03af\0\u059b\0\u05c4\0\u05ed\0\u0616"+
    "\0\u063f\0\u0668\0\u0691\0\u06ba\0\51\0\u06e3\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\51\0\u082b\0\122"+
    "\0\u0854\0\u087d\0\51\0\51\0\u08a6\0\51\0\u08cf\0\u08f8"+
    "\0\51\0\51\0\u0921\0\51\0\u094a\0\u0973\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\2\5\1\6\1\7\1\10"+
    "\1\11\1\3\1\12\1\13\2\3\1\14\1\15\1\2"+
    "\2\3\1\16\7\3\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\2\1\26\1\27\1\30\54\0\1\3"+
    "\1\31\1\3\4\0\1\3\1\0\1\3\1\0\3\3"+
    "\3\0\12\3\14\0\1\3\2\0\1\3\17\0\1\32"+
    "\3\0\1\33\1\34\1\35\24\0\2\5\51\0\1\36"+
    "\1\37\51\0\1\10\1\40\1\41\1\0\1\10\13\0"+
    "\1\41\30\0\1\42\3\0\1\42\44\0\1\10\1\40"+
    "\1\41\1\0\1\10\1\43\12\0\1\41\20\0\17\44"+
    "\1\45\31\44\4\46\1\0\14\46\1\47\27\46\1\0"+
    "\1\3\1\31\1\3\4\0\1\3\1\0\1\3\1\0"+
    "\3\3\3\0\3\3\1\50\6\3\14\0\1\3\34\0"+
    "\1\51\57\0\1\52\7\0\1\3\71\0\1\53\5\0"+
    "\1\54\42\0\1\55\55\0\1\56\43\0\1\57\1\0"+
    "\1\60\23\0\4\36\1\0\44\36\7\37\1\61\41\37"+
    "\10\0\1\62\2\0\2\62\20\0\1\62\23\0\1\42"+
    "\1\0\1\41\1\0\1\42\13\0\1\41\30\0\1\63"+
    "\1\0\1\63\1\0\1\64\1\0\1\63\5\0\1\63"+
    "\2\0\3\63\1\0\1\63\34\0\1\44\32\0\1\3"+
    "\1\31\1\3\4\0\1\3\1\0\1\3\1\0\3\3"+
    "\3\0\11\3\1\65\14\0\1\3\24\0\1\66\47\0"+
    "\1\67\3\0\1\70\50\0\1\71\52\0\1\72\46\0"+
    "\1\73\53\0\1\74\16\0\6\37\1\75\1\61\41\37"+
    "\10\0\1\62\3\0\1\62\44\0\1\76\1\0\1\76"+
    "\1\0\1\76\1\0\1\76\5\0\1\76\2\0\3\76"+
    "\1\0\1\76\16\0\1\3\1\31\1\3\4\0\1\3"+
    "\1\0\1\3\1\0\3\3\3\0\10\3\1\77\1\3"+
    "\14\0\1\3\25\0\1\100\52\0\1\101\51\0\1\102"+
    "\50\0\1\103\42\0\1\104\50\0\1\105\56\0\1\106"+
    "\30\0\1\107\1\0\1\107\1\0\1\107\1\0\1\107"+
    "\5\0\1\107\2\0\3\107\1\0\1\107\16\0\1\3"+
    "\1\31\1\3\4\0\1\3\1\0\1\3\1\0\3\3"+
    "\3\0\10\3\1\110\1\3\14\0\1\3\26\0\1\111"+
    "\52\0\1\112\51\0\1\113\50\0\1\114\42\0\1\115"+
    "\56\0\1\116\27\0\1\117\1\0\1\117\1\0\1\117"+
    "\1\0\1\117\5\0\1\117\2\0\3\117\1\0\1\117"+
    "\44\0\1\120\52\0\1\121\47\0\1\122\30\0\1\123"+
    "\1\0\1\123\1\0\1\123\1\0\1\123\5\0\1\123"+
    "\2\0\3\123\1\0\1\123\45\0\1\124\30\0\1\125"+
    "\1\0\1\125\1\0\1\125\1\0\1\125\5\0\1\125"+
    "\2\0\3\125\1\0\1\125\25\0\1\126\1\0\1\126"+
    "\1\0\1\126\1\0\1\126\5\0\1\126\2\0\3\126"+
    "\1\0\1\126\25\0\1\127\1\0\1\127\1\0\1\127"+
    "\1\0\1\127\5\0\1\127\2\0\3\127\1\0\1\127"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\2\1\1\11\4\1\1\11"+
    "\1\1\4\11\1\1\3\11\5\0\1\1\2\0\2\1"+
    "\2\0\1\1\1\0\2\1\2\11\7\0\4\1\7\0"+
    "\1\11\2\1\6\0\1\11\2\1\2\0\2\11\1\0"+
    "\1\11\1\1\1\0\2\11\1\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HeaderLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return HeaderTypes.PRE_DEFINE_BODY;
            }
          case 33: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 34: break;
          case 3: 
            { return HeaderTypes.IDENTIFIER;
            }
          case 35: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            }
          case 36: break;
          case 5: 
            { return HeaderTypes.FSLASH;
            }
          case 37: break;
          case 6: 
            { return HeaderTypes.ASTERISK;
            }
          case 38: break;
          case 7: 
            { return HeaderTypes.NUMBER_LITERAL;
            }
          case 39: break;
          case 8: 
            { return HeaderTypes.MINUS;
            }
          case 40: break;
          case 9: 
            { return HeaderTypes.EQ;
            }
          case 41: break;
          case 10: 
            { return HeaderTypes.PLUS;
            }
          case 42: break;
          case 11: 
            { return HeaderTypes.LBRACE;
            }
          case 43: break;
          case 12: 
            { return HeaderTypes.RBRACE;
            }
          case 44: break;
          case 13: 
            { return HeaderTypes.LPAREN;
            }
          case 45: break;
          case 14: 
            { return HeaderTypes.RPAREN;
            }
          case 46: break;
          case 15: 
            { return HeaderTypes.COMMA;
            }
          case 47: break;
          case 16: 
            { return HeaderTypes.COLON;
            }
          case 48: break;
          case 17: 
            { return HeaderTypes.SEMICOLON;
            }
          case 49: break;
          case 18: 
            { return HeaderParserDefinition.INLINE_COMMENT;
            }
          case 50: break;
          case 19: 
            { return HeaderTypes.STRING_LITERAL;
            }
          case 51: break;
          case 20: 
            { return HeaderTypes.INCLUDE_VALUE_ANGBR;
            }
          case 52: break;
          case 21: 
            { return HeaderTypes.PLUS_EQ;
            }
          case 53: break;
          case 22: 
            { return HeaderTypes.BRACKET_PAIR;
            }
          case 54: break;
          case 23: 
            { return HeaderTypes.HEX_LITERAL;
            }
          case 55: break;
          case 24: 
            { return HeaderParserDefinition.BLOCK_COMMENT;
            }
          case 56: break;
          case 25: 
            { return HeaderTypes.PRE_ELSE;
            }
          case 57: break;
          case 26: 
            { return HeaderTypes.CLASS;
            }
          case 58: break;
          case 27: 
            { return HeaderTypes.PRE_IFDEF;
            }
          case 59: break;
          case 28: 
            { return HeaderTypes.PRE_UNDEF;
            }
          case 60: break;
          case 29: 
            { return HeaderTypes.PRE_ENDIF;
            }
          case 61: break;
          case 30: 
            { return HeaderTypes.PRE_IFNDEF;
            }
          case 62: break;
          case 31: 
            { return HeaderTypes.PRE_DEFINE;
            }
          case 63: break;
          case 32: 
            { return HeaderTypes.PRE_INCLUDE;
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
