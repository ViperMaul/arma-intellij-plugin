package com.kaylerrenslow.armaplugin.lang.header;

import com.kaylerrenslow.armaDialogCreator.arma.header.HeaderClass;
import com.kaylerrenslow.armaplugin.PluginIcons;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;

/**
 * @author Kayler
 * @since 09/06/2017
 */
public class HeaderConfigFunction {
	private final String tagName, filePath, fileNameNoExt, functionFileExtension;
	private final boolean appendFn_;
	private final HeaderClass headerClass;

	/**
	 * This class is a wrapper class for a function that was defined inside the missionConfigFile (description.ext >> CfgFunctions)
	 *
	 * @param headerClass             the {@link HeaderClass} instance
	 * @param containingDirectoryPath file path to the function that is defined in the config (defined from file="exampleFileDir")
	 * @param fileNameNoExt           file name of the function, or null if determined by the function class name
	 * @param tagName                 the prefix tag for the function. This is defined in the config with tag="something" (or if not defined, it is the first child class of CfgFunctions)
	 * @param functionFileExtension   file extension (.sqf, .fsm)
	 */
	public HeaderConfigFunction(@NotNull HeaderClass headerClass, @NotNull String containingDirectoryPath, @Nullable String fileNameNoExt, @NotNull String tagName, @Nullable String functionFileExtension) {
		this.headerClass = headerClass;
		this.filePath = containingDirectoryPath;
		this.tagName = tagName;
		if (functionFileExtension == null) {
			this.functionFileExtension = ".sqf";
		} else {
			this.functionFileExtension = functionFileExtension;
		}
		this.appendFn_ = fileNameNoExt == null;
		if (fileNameNoExt == null) {
			this.fileNameNoExt = getFunctionFileName(this.getFunctionClassName(), ""); //don't append file extension
		} else {
			this.fileNameNoExt = fileNameNoExt;
		}

	}

	@NotNull
	public String getFunctionClassName() {
		return this.headerClass.getClassName();
	}

	@NotNull
	public String getTagName() {
		return this.tagName;
	}

	@NotNull
	public String getCallableName() {
		return tagName + "_fnc_" + getFunctionClassName();
	}

	/**
	 * Get the file path defined in the config (e.g. folder1/folder2)
	 */
	@NotNull
	public String getContainingDirectoryPath() {
		return this.filePath;
	}

	/**
	 * Get file extension (.sqf, .fsm)
	 */
	@NotNull
	public String getFunctionFileExtension() {
		return this.functionFileExtension;
	}

	/**
	 * @return true if the file name should be prefixed with 'fn_'. This is false only when the file path is explicity provided inside the function class declaration.<br>
	 * Example: myFunctionClass {file="hello.sqf";};
	 */
	public boolean willAppendFn() {
		return this.appendFn_;
	}

	/**
	 * @return the file name for this function. Can be something like: fn_function.sqf or hello.sqf
	 */
	@NotNull
	public String getFunctionFileName() {
		return this.fileNameNoExt + this.functionFileExtension;
	}

	/**
	 * Get a function file name that is generated by the function class name. Example output= fn_functionClassName.sqf
	 *
	 * @param functionClassName     function class name
	 * @param functionFileExtension extension (.sqf, .ext)
	 * @return file name
	 */
	public static String getFunctionFileName(@NotNull String functionClassName, @NotNull String functionFileExtension) {
		return "fn_" + functionClassName + functionFileExtension;
	}

	/**
	 * Get the full path to this function (\ will be converted to / and fn_ will be appended if required)
	 */
	@NotNull
	public String getFullRelativePath() {
		return (this.filePath + "/" + this.fileNameNoExt + this.functionFileExtension).replaceAll("\\\\", "/");
	}

	@NotNull
	public static Icon getIcon() {
		return PluginIcons.ICON_SQF_FUNCTION;
	}

	@NotNull
	public HeaderClass getHeaderClass() {
		return headerClass;
	}
}
