{
  parserClass="com.kaylerrenslow.a3plugin.lang.header.parser.HeaderParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Header"
  psiImplClassSuffix="Impl"
  psiPackage="com.kaylerrenslow.a3plugin.lang.header.psi"
  psiImplPackage="com.kaylerrenslow.a3plugin.lang.header.psi.impl" //comment out the import statement in the HeaderTypes class if the impl package isn't used

  elementTypeHolderClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderTypes"
  elementTypeClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderElementType"
  tokenTypeClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderTokenType"

  psiImplUtilClass="com.kaylerrenslow.a3plugin.lang.header.psi.impl.HeaderPsiUtilForGrammar"
}
// @formatter:off
headerFile ::= file_entry*

//TODO when $ is typed, look into stringtable.xml (try using annotator)
//TODO add in \ lexer rule that is a waiting value just like in the properties custom language demo. This will work for any assignment
//TODO maybe use annotator for SQF config retrieval (config >> "var"). check if the PsiFile is over HeaderFile so you can't annotate in any other language
file_entry ::=  WHITE_SPACE | INLINE_COMMENT | BLOCK_COMMENT | statement_ | preprocessor_group | BAD_CHARACTER

private statement_ ::= (assignment | class_declaration) SEMICOLON

private number_ ::= NUMBER_LITERAL | HEX_LITERAL
private value_ ::= STRING_LITERAL | number_ | IDENTIFIER

array ::= LBRACE array_body? RBRACE
array_body ::= array_entry (COMMA array_entry)*
array_entry ::= expression | value_ | array

assignment_identifier ::= IDENTIFIER /*| NUM_IDENTIFIER*/

assignment ::= basic_assignment | array_assignment {methods=[getAssigningVariable getAssigningValue]}
basic_assignment ::= assignment_identifier EQ (expression | value_ ) {extends("basic_assignment")=assignment}
array_assignment ::= assignment_identifier BRACKET_PAIR EQ array {extends("array_assignment")=assignment}

expression ::= add_expression_

private add_expression_ ::= mult_expression_ PLUS add_expression_
				 | mult_expression_ MINUS add_expression_
				 | mult_expression_

private mult_expression_ ::= term_ ASTERISK mult_expression_
				  | term_ FSLASH mult_expression_
				  | term_ PERC mult_expression_
				  | term_ MOD mult_expression_
				  | term_ CARET mult_expression_
				  | term_

private term_ ::= (PLUS | MINUS)? (
			number_
            | IDENTIFIER
			| LPAREN expression RPAREN
		  )


class_declaration ::= class_stub class_content? {methods=[getClassName getAttributes hasAttributes]}
class_stub ::= CLASS IDENTIFIER (COLON IDENTIFIER)? {methods=[getClassName]}

class_content ::= LBRACE file_entry* RBRACE

//Preprocessor things
preprocessor_group ::= preprocessor+
preprocessor ::= pre_include //| pre_define_//TODO

pre_include ::= PREPROCESS_INCLUDE (pre_include_file) {extends("pre_include")=preprocessor methods=[getPathString getHeaderFileFromInclude]} //TODO does include or other preprocessor commands allow multilines? (https://community.bistudio.com/wiki/PreProcessor_Commands#Multi-line
pre_include_file ::= STRING_LITERAL | INCLUDE_VALUE_ANGBR
//private pre_define_ ::= PREPROCESS_DEFINE