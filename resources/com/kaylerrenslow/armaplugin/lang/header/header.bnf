{
  parserClass="com.kaylerrenslow.armaplugin.lang.header.parser.HeaderParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Header"
  psiImplClassSuffix="Impl"
  psiPackage="com.kaylerrenslow.armaplugin.lang.header.psi"
//  psiImplPackage="com.kaylerrenslow.armaplugin.lang.header.psi.impl" //comment out the import statement in the HeaderTypes class if the impl package isn't used

  elementTypeHolderClass="com.kaylerrenslow.armaplugin.lang.header.psi.HeaderTypes"
  elementTypeClass="com.kaylerrenslow.armaplugin.lang.header.psi.HeaderElementType"
  tokenTypeClass="com.kaylerrenslow.armaplugin.lang.header.psi.HeaderTokenType"

//  psiImplUtilClass="com.kaylerrenslow.armapluginin.lang.header.psi.HeaderPsiUtilForGrammar"
}
// @formatter:off

/*
The header file consists of tokens in any order.
We do not care about how the code is written because all header files are parsed with a different parser.
The reasons for having two parsers is as follows:
    * It will be extremely difficult and complex to have a parser that is compatible with psi
      (psi allows editing the AST without reconstructing the entire thing).
    * Arma's preprocessor allows for inline sqf with the __EXEC and __EVAL macro for config/header files.
      With regular SQF files, __EXEC and __EVAL aren't available, so the preprocessed output is more easily determined
      since variables and conditions can't be made inside the macro itself (__EXEC can run code and check for conditions).
    * In order to get the final result of the header file with __EXEC and __EVAL considered, it will need to be
      completely preprocessed. Why? Classes can be defined with a mixture of other macros that are included from
      another file. What makes that worse is that #undef can undefined macros.
    * By having a different different parser that will completely preprocess the file and then parse it, it will allow:
        * User can see the preprocessed result.
        * We don't need to worry about referencing preprocessor macros and just retrieve raw classes and values.
        * Referencing the config/header file should statistically happen more times than the user editing the config/header file.
          Why spend so much of the CPU dynamically preprocessing (which is expensive) when only 1 preprocess needs to happen?
    * So, the primary reason is because of __EXEC and __EVAL. They can dynamically change the preprocess output
      by simply including a different file.
    * Also, the user shouldn't be making that many changes to the config/header files. The user will be mostly working
      with SQF.

    * In short, I'm lazy. ;)
*/

headerFile ::= token_*

private token_ ::= (/*numbers and string*/ NUMBER_LITERAL | HEX_LITERAL | STRING_LITERAL)
                 | (/*keywords*/ CLASS)
                 | (/*operators*/ EQ | PLUS_EQ | PLUS | MINUS | FSLASH | ASTERISK)
                 | (/*symbols*/  LBRACE | RBRACE | LPAREN | RPAREN | BRACKET_PAIR | COMMA | COLON | SEMICOLON)
                 | (/*preprocessor*/ MACRO)
                 | (/*variables*/ IDENTIFIER)

