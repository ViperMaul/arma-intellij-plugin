{
  parserClass="com.kaylerrenslow.a3plugin.lang.sqf.parser.SQFParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SQF"
  psiImplClassSuffix="Impl"
  psiPackage="com.kaylerrenslow.a3plugin.lang.sqf.psi"
  psiImplPackage="com.kaylerrenslow.a3plugin.lang.sqf.psi.impl"

  elementTypeHolderClass="com.kaylerrenslow.a3plugin.lang.sqf.psi.SQFTypes"
  elementTypeClass="com.kaylerrenslow.a3plugin.lang.sqf.psi.SQFElementType"
  tokenTypeClass="com.kaylerrenslow.a3plugin.lang.sqf.psi.SQFTokenType"

  psiImplUtilClass="com.kaylerrenslow.a3plugin.lang.sqf.psi.SQFPsiImplUtilForGrammar"

  name("macro_call")="Macro Call"
  name("assignment")="Assignment"
  name("expression")="Expression"
  extends(".*expression|code_block")=expression
  consumeTokenMethod(".*expression|expression")="consumeTokenFast" //https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
  extends(".*_statement")=statement
}
// @formatter:off
sqfFile ::= file_scope //first rule is private. place file_scope inside and file_scope will be root rule

file_scope ::= items_ {extends("file_scope")=local_scope}
local_scope ::= items_ {implements="com.kaylerrenslow.a3plugin.lang.sqf.psi.SQFScope" methods=[getPrivateVars getStatementsForScope checkIfSpawn getPrivatizerElement getCodeBlock]}

private items_ ::= (statement SEMICOLON)* statement?

variable ::= GLOBAL_VAR | LOCAL_VAR | LANG_VAR {mixin="com.kaylerrenslow.a3plugin.lang.sqf.psi.mixin.SQFVariableNamedElementMixin" implements="com.kaylerrenslow.a3plugin.lang.sqf.psi.mixin.SQFVariableNamedElement" methods=[followsSQFFunctionNameRules getDeclarationScope isAssigningVariable getMyAssignment getPrivatization varNameMatches]}

statement ::= ( assignment | case_statement | expression | quest_statement ) //case statement must come before expression or it will think that case is a command

quest_statement ::= QUEST expression COLON expression
case_statement ::= case_command expression (COLON code_block)?

assignment ::= (command? variable) EQ expression {methods=[getAssigningVariable isDeclaredPrivate]}

expression ::= conditional_group_
            | add_group_
            | comp_expression
            | mul_group_
            | exponent_expression
            | config_fetch_expression
            | command_expression
            | unary_expression //keep below command expression
            | literal_expression
            | code_block
            | paren_expression



private add_group_ ::= add_expression | sub_expression
private mul_group_ ::= mul_expression | div_expression | mod_expression
private conditional_group_::= bool_and_expression | bool_or_expression | bool_not_expression

unary_expression ::= (PLUS | MINUS) (expression)

literal_expression ::= string
                    | macro_call //must come before variable
                    | variable
                    | INTEGER_LITERAL
                    | array_val
                    | DEC_LITERAL
                    | HEX_LITERAL

add_expression ::= expression PLUS expression
sub_expression ::= expression MINUS expression
mul_expression ::= expression ASTERISK expression
div_expression ::= expression FSLASH expression
mod_expression ::= expression PERC expression

bool_and_expression ::= expression AMPAMP expression
bool_or_expression ::= expression BARBAR expression
bool_not_expression::= EXCL expression

comp_expression ::= expression (EQEQ | NE | LT | LE | GT | GE) expression

config_fetch_expression ::= expression (FSLASH | GTGT) expression

exponent_expression ::= expression (CARET expression)+
command_expression ::= command_prefix_arg_? command command_postfix_arg_? {methods=[getCommandName getPrefixArgument getPostfixArgument]}
private command_prefix_arg_ ::= code_block | unary_expression | paren_expression | literal_expression
private command_postfix_arg_ ::= (code_block expression?) | expression

paren_expression ::= LPAREN expression RPAREN

case_command ::= CASE {extends("case_command")=command}
command ::= COMMAND_TOKEN {mixin="com.kaylerrenslow.a3plugin.lang.sqf.psi.mixin.SQFCommandElement" implements="com.intellij.psi.PsiNameIdentifierOwner" methods=[]}
string ::= STRING_LITERAL {mixin="com.kaylerrenslow.a3plugin.lang.sqf.psi.mixin.SQFStringMixin" methods=[getNonQuoteText getNonQuoteRangeRelativeToFile getNonQuoteRangeRelativeToElement]}

macro_call ::= variable LPAREN expression (COMMA expression)* RPAREN

array_val ::= (LBRACKET RBRACKET) | (LBRACKET array_entry (COMMA array_entry)* RBRACKET )
array_entry ::= expression {methods=[getCodeBlock]}

code_block ::= (LBRACE RBRACE)| (LBRACE local_scope RBRACE)