{
  parserClass="com.kaylerrenslow.a3plugin.lang.header.parser.HeaderParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Header"
  psiImplClassSuffix="Impl"
  psiPackage="com.kaylerrenslow.a3plugin.lang.header.psi"
  psiImplPackage="com.kaylerrenslow.a3plugin.lang.header.psi.impl" //comment out the import statement in the HeaderTypes class if the impl package isn't used

  elementTypeHolderClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderTypes"
  elementTypeClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderElementType"
  tokenTypeClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderTokenType"

  psiImplUtilClass="com.kaylerrenslow.a3plugin.lang.header.psi.HeaderPsiUtilForGrammar"
}
// @formatter:off
headerFile ::= file_entry*

file_entries ::= file_entry*

file_entry ::= INLINE_COMMENT | BLOCK_COMMENT | preprocessor_group | statement_

private statement_ ::= (assignment | class_declaration) SEMICOLON | macro_function SEMICOLON? | defined_text SEMICOLON?

private number_ ::= NUMBER_LITERAL | HEX_LITERAL
private value_ ::= STRING_LITERAL | number_ | IDENTIFIER | macro_function

array ::= LBRACE array_body? RBRACE
array_body ::= array_entry (COMMA array_entry)*
array_entry ::= expression | value_ | array | stringtable_key

assignment_identifier ::= IDENTIFIER

stringtable_key ::= STRINGTABLE_ENTRY {mixin="com.kaylerrenslow.a3plugin.lang.header.psi.mixin.HeaderStringtableKeyMixin" implements="com.intellij.psi.PsiNamedElement" methods=[getKey]}

assignment ::= basic_assignment | array_assignment {methods=[getAssigningVariable getAssigningValue getAssigningIdentifierNode]}
basic_assignment ::= assignment_identifier EQ (stringtable_key | expression | value_) {extends("basic_assignment")=assignment}
array_assignment ::= assignment_identifier BRACKET_PAIR (EQ | PLUS_EQ) array {extends("array_assignment")=assignment}

expression ::= add_expression_

private add_expression_ ::= mult_expression_ PLUS add_expression_
				 | mult_expression_ MINUS add_expression_
				 | mult_expression_

private mult_expression_ ::= term_ ASTERISK mult_expression_
				  | term_ FSLASH mult_expression_
				  | term_

private term_ ::= (PLUS | MINUS)? (
			number_
            | IDENTIFIER
			| LPAREN expression RPAREN
		  )


class_declaration ::= class_stub class_content? {methods=[getClassName getExtendClassName getAttributes hasAttributes setAttribute getClassNameNode removeBracesIfEmpty bracesAreEmpty removeFromTree createClassContent addFileEntry addClassDeclaration]}
class_stub ::= CLASS IDENTIFIER (COLON IDENTIFIER)? {mixin="com.kaylerrenslow.a3plugin.lang.header.psi.mixin.HeaderClassStubMixin" implements="com.intellij.psi.PsiNamedElement" methods=[getClassName getExtendClassName getClassNameNode]}

class_content ::= LBRACE file_entries RBRACE

//Preprocessor things
preprocessor_group ::= preprocessor+
preprocessor ::= pre_include | pre_macro | pre_exec

pre_include ::= PREPROCESS_INCLUDE pre_include_file {extends("pre_include")=preprocessor methods=[getPathString getHeaderFileFromInclude]}
pre_include_file ::= STRING_LITERAL | INCLUDE_VALUE_ANGBR
pre_macro ::= PREPROCESS_MACRO

pre_exec ::= PREPROCESS_EXEC
pre_eval ::= PREPROCESS_EVAL

macro_function ::= IDENTIFIER LPAREN ((value_ | array) (COMMA (value_ | array))*) RPAREN | pre_eval
defined_text ::= IDENTIFIER